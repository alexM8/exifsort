#!/bin/bash

#------------------------------------------------------------------------------------------------------------------------------- СЛИВ ФОТОК В КОРЕНЬ TMP -------------------------------------------------------------------------------------------------------------------

find tmp -type f | grep -v '/\.' | while read someshit										# Рекурсивно ищем в tmp файлы, исключая скрытые
	do															
	mv $someshit tmp/ 2> /dev/null												# Перемещаем файлы в tmp, подавляя вывод
	done															

#------------------------------------------------------------------------------------------------------------------------------- ПРОВЕРКА УТИЛИТЫ EXIF ---------------------------------------------------------------------------------------------------------------------

exif > /dev/null 2&>/dev/null;													# Пробуем исполнить exif, подавляя весь вывод
if [ $? -eq 127 ]														# Если код ошибки 127, что значит "Программа не найдена"
	then echo "Can't find exif tool. Try "apt-get install exif" (Debian) or "brew install exif" (Mac OS X)";		# Говорим, что программы для анализа exif нету
	exit;															# Завершаем работу скрипта
fi

#------------------------------------------------------------------------------------------------------------------------------- СОЗДАНИЕ ПАПОК ----------------------------------------------------------------------------------------------------------------------------

mkdir tmp originals nefs previews slides 2> /dev/null										# Создаем рабочие папки. Если одна из папок уже присутстует, скрипт будет сыпать ошибки в /dev/null.

#------------------------------------------------------------------------------------------------------------------------------- ПРОВЕРКА ФОТОК ----------------------------------------------------------------------------------------------------------------------------

find tmp -type f | grep -i jpg | while read shit                                                                                # Построчно считываем файлы jpg в папке tmp
        do
        var=`exif $shit 2> /dev/null | egrep -o "^Date\sand\sTime.+" | awk '{print $5}' | uniq | sed 's/:/-/g'`                 # Вынимаем из exif-данных время сьемки
                if [[ $var =~ [0-9][0-9]-[0-9][0-9]-[0-9][0-9] ]]                                                               # Если время вынуто правильно
                        then :                                                                                                  # Тогда ничего не делаем
                        else touch .fail                                                                                        # В противном случае, создаем файл .fail
                fi
        done

if [ ! -f .fail ]                                                                                                               # Если файла .fail не существует
	then echo "Exif data is present in every photo"                                                                         # Тогда говорим, что все фотки подлежат обработке через exif
	else :                                                                                                                  # В противном случае, ничего не делаем. Сообщение об ошибке будет выведено потом
fi

#------------------------------------------------------------------------------------------------------------------------------- СОРТИРОВКА ФОТОК -------------------------------------------------------------------------------------------------------------------------

if [ -f .fail ]                                                                                                                 # Если файл .fail существует
then echo "One of the photos contains no exif data. Parsing impossible"; rm .fail 2> /dev/null                                  # То значит, что в tmp есть фотография без exif-данных. Скрипт прекращает работу, выдается сообщение об ошибке и файл .fail удаляется
else d=true                                                                                                                     # В противном случае, если файла .fail нету, ставим служебную переменную для определения первых фоток
find tmp -type f | grep -i 'jpg\|nef' | while read line                                                                         # Считываем построчно файлы в tmp. Будут приняты только файлы nef или jpg
        do
                if $d                                                                                                           # Если файл первый
                        then
                        if echo $line | grep -i jpg > /dev/null                                                                 # Если это файл jpg
                        then
                        first=`echo $line | cut -c 9-12`
                        folder="`exif $line | egrep -o "^Date\sand\sTime.+" | awk '{print $5}' | uniq | sed 's/:/-/g'`_$first"	# То извлекаем с него дату сьемки при помощи утилиты exif, вывод которой мы парсим
                        mkdir originals/$folder 2> /dev/null     		                                                # И создаем соответствующую папку с названием как дата сьемки. Возможно, будет создаватся папка, которая уже создана: stderr будет подавлен
                        cp $line previews                                                                                       # Копируем первые фотки в папку для превьюх
                        mv -v $line originals/$folder | awk '{print $3}' | grep -i jpg >> .sorted   	                        # Перемещаем в новосозданую папку первый файл. Путь к файлу, который мы переместили запишется в .sorted
                        d=false                                                                                                 # Меняем служебную переменную, тоесть ко всем остальным файлам скрипт будет относится не как к первым
                        else mv $line nefs/                                                                                     # В противном случае, тоесть, если это файл nef, перемещаем его в nefs
                        fi
                else echo $line | grep -i jpg > /dev/null                                                                       # В противном случае, тоесть, если файл не первый, считываем построчно его название, при этом подавляя вывод
                        if [ $? -eq 0 ]                                                                                         # Если строка успешно грепнулась по JPG
                                then mv -v $line originals/$folder | awk '{print $3}' | grep -i jpg >> .sorted   	        # Тогда перемещаем файл в папку, которая создавалась в предыдущей части скрипта. Путь к файлу, который мы переместили запишется в .sorted
                        else mv $line nefs/                                                                                     # Если это NEF разделитель, то перемещаем его в папку для разделителей
                                d=true                                                                                          # Меняем служебную переменную, тоесть к следующему файлу скрипт отнесется как к первой фотке
                        fi
                fi
        done
echo "Sorting is completed. Resizes folder is syncronized"                                                                      # Говорим, что фотки отсортированы

#------------------------------------------------------------------------------------------------------------------------------- ЛИНКОВКА ПАПОК ДЛЯ СЛАЙДШОУ ---------------------------------------------------------------------------------------------------------------

rm -rf slides/*                                                                                                                 # Чистим папку со ссылками на слайдшоу
ls -1 originals/ | tail -15 | while read orifolder                                                                              # Построчно считываем список папок, но берем только последние 15
        do
        ln originals/$orifolder/* slides/                                                                                       # Создаем жесткие ссылки на каждую фотку в тех 15ти папках и кидаем их в папку slides
        done
echo "Slides folder updated"                                                                                                    # Говорим, что папка со слайдами актуальна
fi
rm -rf tmp/*															# Чистим папку tmp
